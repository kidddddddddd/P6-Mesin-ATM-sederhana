#include <iostream> // Menyertakan header file iostream untuk input/output standar
#include <string> // Menyertakan header file string untuk operasi string
#include <vector> // Menyertakan header file vector untuk menggunakan tipe data vector
#include <cstdlib> // Menyertakan header file cstdlib untuk fungsi-fungsi seperti rand()
#include <ctime> // Menyertakan header file ctime untuk fungsi time()
#include <limits> // Menyertakan header file limits untuk mendapatkan nilai maksimum dari tipe data tertentu

using namespace std; // Menggunakan namespace std untuk tidak perlu menuliskan std::

const int WITHDRAWAL_AMOUNTS[] = {50000, 100000, 200000, 500000, 1000000}; // Array konstanta untuk jumlah penarikan tunai
const int NUM_WITHDRAWAL_AMOUNTS = sizeof(WITHDRAWAL_AMOUNTS) / sizeof(int); // Jumlah elemen dalam array WITHDRAWAL_AMOUNTS
const int DEPOSIT_AMOUNTS[] = {50000, 100000, 200000, 500000, 1000000}; // Array konstanta untuk jumlah pengisian saldo
const int NUM_DEPOSIT_AMOUNTS = sizeof(DEPOSIT_AMOUNTS) / sizeof(int); // Jumlah elemen dalam array DEPOSIT_AMOUNTS

struct Account { // Struktur data untuk menyimpan informasi akun
    int accountId; // ID akun
    string username; // Username akun
    string password; // Password akun
    int balance; // Saldo akun
};

vector<Account*> accounts; // Vektor untuk menyimpan pointer ke objek Account

void clearInputBuffer() { // Fungsi untuk membersihkan buffer input
    cin.clear(); // Mengosongkan flag error pada stream input
    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Mengabaikan semua karakter hingga new line
}

void createAccount() { // Fungsi untuk membuat akun baru
    string username, password;
    cout << "Masukkan username: "; // Meminta input username
    getline(cin >> ws, username); // Membaca input username dengan mengabaikan whitespace

    cout << "Masukkan password: "; // Meminta input password
    getline(cin >> ws, password); // Membaca input password dengan mengabaikan whitespace

    static bool seedInitialized = false; // Flag untuk memastikan seed random hanya diinisialisasi sekali
    if (!seedInitialized) { // Jika seed belum diinisialisasi
        srand(time(NULL)); // Menginisialisasi seed random dengan waktu saat ini
        seedInitialized = true; // Menandai seed sudah diinisialisasi
    }
    int accountId = rand() % 1000000; // Menghasilkan ID akun secara acak antara 0 dan 999999

    Account* newAccount = new Account{accountId, username, password, 0}; // Membuat objek Account baru dengan saldo awal 0
    accounts.push_back(newAccount); // Menambahkan pointer ke objek Account ke vektor accounts

    cout << "Akun berhasil dibuat dengan ID: " << accountId << endl; // Menampilkan ID akun yang baru dibuat
}

int login() { // Fungsi untuk melakukan login
    int accountId;
    string username, password;

    cout << "Masukkan ID akun: "; // Meminta input ID akun
    while (!(cin >> accountId)) { // Jika input bukan angka
        cout << "Input tidak valid. Masukkan angka untuk ID akun: "; // Meminta input yang valid
        clearInputBuffer(); // Membersihkan buffer input
    }

    cin.ignore(); // Mengabaikan karakter new line setelah input ID akun

    cout << "Masukkan username: "; // Meminta input username
    getline(cin, username); // Membaca input username

    cout << "Masukkan password: "; // Meminta input password
    getline(cin, password); // Membaca input password

    for (int i = 0; i < accounts.size(); i++) { // Mencari akun yang sesuai dengan ID, username, dan password
        if (accounts[i]->accountId == accountId && accounts[i]->username == username && accounts[i]->password == password) {
            return i; // Mengembalikan indeks akun yang ditemukan
        }
    }

    cout << "ID akun, username, atau password salah." << endl; // Jika tidak ditemukan akun yang sesuai
    return -1; // Mengembalikan -1 (tidak ditemukan)
}

void withdrawCash(int accountIndex) { // Fungsi untuk melakukan penarikan tunai
    int choice, amount;

    cout << "Pilih jumlah yang ingin ditarik:" << endl; // Menampilkan pilihan jumlah penarikan
    for (int i = 0; i < NUM_WITHDRAWAL_AMOUNTS; i++) { // Menampilkan pilihan jumlah penarikan yang tersedia
        cout << i + 1 << ". " << WITHDRAWAL_AMOUNTS[i] << endl;
    }
    cout << NUM_WITHDRAWAL_AMOUNTS + 1 << ". Jumlah lain" << endl; // Pilihan untuk memasukkan jumlah lain
    cout << "Masukkan pilihan Anda: "; // Meminta input pilihan

    while (!(cin >> choice) || choice < 1 || choice > NUM_WITHDRAWAL_AMOUNTS + 1) { // Jika input tidak valid
        cout << "Input tidak valid. Masukkan pilihan yang valid: "; // Meminta input yang valid
        clearInputBuffer(); // Membersihkan buffer input
    }

    if (choice == NUM_WITHDRAWAL_AMOUNTS + 1) { // Jika memilih jumlah lain
        cout << "Masukkan jumlah yang ingin ditarik: "; // Meminta input jumlah
        while (!(cin >> amount) || amount <= 0) { // Jika input tidak valid atau kurang dari atau sama dengan 0
            cout << "Input tidak valid. Masukkan jumlah yang valid: "; // Meminta input yang valid
            clearInputBuffer(); // Membersihkan buffer input
        }
    } else { // Jika memilih jumlah yang tersedia
        amount = WITHDRAWAL_AMOUNTS[choice - 1]; // Mengambil jumlah dari array WITHDRAWAL_AMOUNTS
    }

    if (amount > accounts[accountIndex]->balance) { // Jika jumlah penarikan melebihi saldo
        cout << "Saldo tidak mencukupi." << endl; // Menampilkan pesan saldo tidak mencukupi
        return; // Keluar dari fungsi
    }

    accounts[accountIndex]->balance -= amount; // Mengurangi saldo dengan jumlah penarikan
    cout << "Penarikan tunai sebesar " << amount << " berhasil." << endl; // Menampilkan pesan penarikan berhasil
}

void checkBalance(int accountIndex) { // Fungsi untuk memeriksa saldo
    cout << "Saldo Anda: " << accounts[accountIndex]->balance << endl; // Menampilkan saldo akun
}

void depositCash(int accountIndex) { // Fungsi untuk melakukan pengisian saldo
    int choice, amount;

    cout << "Pilih jumlah yang ingin diisi:" << endl; // Menampilkan pilihan jumlah pengisian
    for (int i = 0; i < NUM_DEPOSIT_AMOUNTS; i++) { // Menampilkan pilihan jumlah pengisian yang tersedia
        cout << i + 1 << ". " << DEPOSIT_AMOUNTS[i] << endl;
    }
    cout << NUM_DEPOSIT_AMOUNTS + 1 << ". Jumlah lain" << endl; //
    cout << "Masukkan pilihan Anda: "; // Meminta input pilihan

   while (!(cin >> choice) || choice < 1 || choice > NUM_DEPOSIT_AMOUNTS + 1) { // Jika input tidak valid
       cout << "Input tidak valid. Masukkan pilihan yang valid: "; // Meminta input yang valid
       clearInputBuffer(); // Membersihkan buffer input
   }

   if (choice == NUM_DEPOSIT_AMOUNTS + 1) { // Jika memilih jumlah lain
       cout << "Masukkan jumlah yang ingin diisi: "; // Meminta input jumlah
       while (!(cin >> amount) || amount <= 0) { // Jika input tidak valid atau kurang dari atau sama dengan 0
           cout << "Input tidak valid. Masukkan jumlah yang valid: "; // Meminta input yang valid
           clearInputBuffer(); // Membersihkan buffer input
       }
   } else { // Jika memilih jumlah yang tersedia
       amount = DEPOSIT_AMOUNTS[choice - 1]; // Mengambil jumlah dari array DEPOSIT_AMOUNTS
   }

   accounts[accountIndex]->balance += amount; // Menambahkan jumlah pengisian ke saldo akun
   cout << "Pengisian saldo sebesar " << amount << " berhasil." << endl; // Menampilkan pesan pengisian saldo berhasil
}

int main() { // Fungsi utama
   int choice, accountIndex;

   while (true) { // Loop utama program
       cout << "\n===== Selamat Datang di ATM =====" << endl; // Menampilkan menu utama
       cout << "1. Buat Akun Baru" << endl; // Pilihan untuk membuat akun baru
       cout << "2. Login" << endl; // Pilihan untuk melakukan login
       cout << "3. Keluar" << endl; // Pilihan untuk keluar dari program
       cout << "Masukkan pilihan Anda: "; // Meminta input pilihan

       while (!(cin >> choice) || choice < 1 || choice > 3) { // Jika input tidak valid
           cout << "Input tidak valid. Masukkan pilihan yang valid: "; // Meminta input yang valid
           clearInputBuffer(); // Membersihkan buffer input
       }

       switch (choice) { // Melakukan aksi sesuai pilihan
           case 1: // Membuat akun baru
               createAccount();
               break;
           case 2: // Melakukan login
               accountIndex = login();
               if (accountIndex != -1) { // Jika login berhasil
                   while (true) { // Loop menu ATM
                       cout << "\n===== Menu ATM =====" << endl; // Menampilkan menu ATM
                       cout << "1. Tarik Tunai" << endl; // Pilihan untuk melakukan penarikan tunai
                       cout << "2. Cek Saldo" << endl; // Pilihan untuk memeriksa saldo
                       cout << "3. Isi Saldo" << endl; // Pilihan untuk melakukan pengisian saldo
                       cout << "4. Keluar" << endl; // Pilihan untuk keluar dari menu ATM
                       cout << "Masukkan pilihan Anda: "; // Meminta input pilihan

                       while (!(cin >> choice) || choice < 1 || choice > 4) { // Jika input tidak valid
                           cout << "Input tidak valid. Masukkan pilihan yang valid: "; // Meminta input yang valid
                           clearInputBuffer(); // Membersihkan buffer input
                       }

                       switch (choice) { // Melakukan aksi sesuai pilihan pada menu ATM
                           case 1: // Melakukan penarikan tunai
                               withdrawCash(accountIndex);
                               break;
                           case 2: // Memeriksa saldo
                               checkBalance(accountIndex);
                               break;
                           case 3: // Melakukan pengisian saldo
                               depositCash(accountIndex);
                               break;
                           case 4: // Keluar dari menu ATM
                               cout << "Terima kasih telah menggunakan ATM." << endl;
                               return 0; // Mengakhiri program
                           default:
                               cout << "Pilihan tidak valid." << endl; // Jika input tidak valid
                               break;
                       }
                   }
               }
               break;
           case 3: // Keluar dari program
               cout << "Terima kasih telah menggunakan ATM." << endl; // Menampilkan pesan terima kasih

               for (int i = 0; i < accounts.size(); i++) { // Membebaskan memori yang dialokasikan untuk objek Account
                   delete accounts[i];
               }
               accounts.clear(); // Mengosongkan vektor accounts

               return 0; // Mengakhiri program
           default:
               cout << "Pilihan tidak valid." << endl; // Jika input tidak valid
               break;
       }
   }

   return 0; // Mengakhiri program
}
